openapi: 3.0.0
info:
  title: EnviroSense API
  version: 1.0.0
  description: API documentation for EnviroSense.

servers:
  - url: http://94.130.75.173:8101
    description: Deployed API Server

tags:
  - name: Building
    description: Endpoints related to buildings
  - name: Room
    description: Endpoints related to rooms
  - name: Device
    description: Endpoints related to devices
  - name: Device Data
    description: Endpoints related to device data

paths:
  /buildings:
    get:
      tags:
        - Building
      summary: Get all buildings
      operationId: getBuildings
      responses:
        '200':
          description: A list of buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
    post:
      tags:
        - Building
      summary: Create a new building
      operationId: createBuilding
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBuildingRequest'
      responses:
        '201':
          description: Building created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}:
    get:
      tags:
        - Building
      summary: Get a building by document ID
      operationId: getBuildingById
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Building
      summary: Update an existing building
      operationId: updateBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBuildingRequest'
      responses:
        '200':
          description: Building updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Building
      summary: Delete a building
      operationId: deleteBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Building deleted successfully
        '404':
          description: Building not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}/rooms:
    post:
      tags:
        - Building
      summary: Add rooms to a building
      operationId: addRoomsToBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoomsToBuildingRequest'
      responses:
        '200':
          description: Rooms added to building
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /buildings/{buildingDocumentId}/rooms/{roomDocumentId}:
    delete:
      tags:
        - Building
      summary: Remove a room from a building
      operationId: removeRoomFromBuilding
      parameters:
        - name: buildingDocumentId
          in: path
          required: true
          schema:
            type: string
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Room removed from building
        '404':
          description: Building or room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms:
    get:
      tags:
        - Room
      summary: Get all rooms
      operationId: getRooms
      responses:
        '200':
          description: A list of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      tags:
        - Room
      summary: Create a new room
      operationId: createRoom
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomRequest'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}:
    get:
      tags:
        - Room
      summary: Get a room by document ID
      operationId: getRoomById
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Room
      summary: Update an existing room
      operationId: updateRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoomRequest'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Room
      summary: Delete a room
      operationId: deleteRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}/air-quality:
    get:
      tags:
        - Room
      summary: Get air quality data for a room
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Air quality data for the room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirQualityResponse'

  /rooms/{roomDocumentId}/devices:
    post:
      tags:
        - Room
      summary: Add a device to a room
      operationId: addDeviceToRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDeviceToRoomRequest'
      responses:
        '200':
          description: Device added to room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rooms/{roomDocumentId}/devices/{deviceDocumentId}:
    delete:
      tags:
        - Room
      summary: Remove a device from a room
      operationId: removeDeviceFromRoom
      parameters:
        - name: roomDocumentId
          in: path
          required: true
          schema:
            type: string
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device removed from room
        '404':
          description: Room or device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices:
    get:
      tags:
        - Device
      summary: Get all devices
      operationId: getDevices
      responses:
        '200':
          description: A list of devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags:
        - Device
      summary: Create a new device
      operationId: createDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '201':
          description: Device created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceDocumentId}:
    get:
      tags:
        - Device
      summary: Get a device by document ID
      operationId: getDeviceById
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Device
      summary: Update an existing device
      operationId: updateDevice
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequest'
      responses:
        '200':
          description: Device updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Device
      summary: Delete a device
      operationId: deleteDevice
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device deleted successfully
        '404':
          description: Device not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /devices/{deviceDocumentId}/device-data:
    post:
      tags:
        - Device
      summary: Add device data to a device
      operationId: addDeviceData
      parameters:
        - name: deviceDocumentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDeviceDataRequest'
      responses:
        '200':
          description: Device data added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /device-data:
    get:
      tags:
        - Device Data
      summary: Get all device data entries
      operationId: getDeviceData
      parameters:
        - name: identifier
          in: query
          required: false
          schema:
            type: string
          description: Device identifier to filter data
      responses:
        '200':
          description: A list of device data entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceData'

  /device-data/{deviceDataDocumentId}:
    get:
      tags:
        - Device Data
      summary: Get device data by document ID
      operationId: getDeviceDataById
      parameters:
        - name: deviceDataDocumentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single device data entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceData'
        '404':
          description: Device data not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Building:
      type: object
      properties:
        id:
          type: string
        documentId:
          type: string
        name:
          type: string
        address:
          type: string
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
      required:
        - id
        - name
        - address

    CreateBuildingRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address

    UpdateBuildingRequest:
      type: object
      properties:
        name:
          type: string
        address:
          type: string

    AddRoomsToBuildingRequest:
      type: object
      properties:
        rooms:
          type: array
          items:
            type: string
          description: Array of room document IDs to add
      required:
        - rooms

    Room:
      type: object
      properties:
        id:
          type: string
        documentId:
          type: string
        name:
          type: string
        building:
          $ref: '#/components/schemas/Building'
        roomType:
          $ref: '#/components/schemas/RoomType'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
      required:
        - id
        - name
        - roomType

    CreateRoomRequest:
      type: object
      properties:
        name:
          type: string
        roomTypeDocumentId:
          type: string
        buildingDocumentId:
          type: string
      required:
        - name
        - roomTypeDocumentId

    UpdateRoomRequest:
      type: object
      properties:
        name:
          type: string
        roomTypeDocumentId:
          type: string

    AirQualityResponse:
      type: object
      required:
        - id
        - enviroScore
        - airQuality
      properties:
        id:
          type: string
          description: Room ID
        enviroScore:
          type: integer
        airQuality:
          type: object
          required:
            - temperature
            - humidity
            - ppm
          properties:
            temperature:
              type: number
              format: float
            humidity:
              type: number
              format: float
            ppm:
              type: number
              format: float


    AddDeviceToRoomRequest:
      type: object
      properties:
        devices:
          type: array
          items:
            type: string
          description: Array of device document IDs to add
      required:
        - devices

    RoomType:
      type: object
      properties:
        id:
          type: string
        documentId:
          type: string
        typeName:
          type: string
        description:
          type: string
      required:
        - id
        - typeName

    Device:
      type: object
      properties:
        id:
          type: string
        documentId:
          type: string
        identifier:
          type: string
        room:
          $ref: '#/components/schemas/Room'
        deviceData:
          type: array
          items:
            $ref: '#/components/schemas/DeviceData'
      required:
        - id
        - identifier

    CreateDeviceRequest:
      type: object
      properties:
        identifier:
          type: string
        roomDocumentId:
          type: string
      required:
        - identifier
        - roomDocumentId

    UpdateDeviceRequest:
      type: object
      properties:
        identifier:
          type: string

    DeviceData:
      type: object
      properties:
        id:
          type: string
        documentId:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        timestamp:
          type: string
          format: date-time
        airData:
          $ref: '#/components/schemas/AirData'
      required:
        - id
        - device
        - timestamp
        - airData

    AddDeviceDataRequest:
      type: object
      properties:
        airData:
          $ref: '#/components/schemas/AirData'
      required:
        - airData

    AirData:
      type: object
      properties:
        temperature:
          type: number
        humidity:
          type: number
        ppm:
          type: number
      required:
        - temperature
        - humidity
        - ppm

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Enter your API token as a Bearer token

security:
  - bearerAuth: []